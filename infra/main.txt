terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.16"
    }
  }

  required_version = ">= 1.2.0"
}

provider "aws" {
  region  = var.regiao_aws
}

resource "aws_launch_template" "maquina" {
  image_id           = "ami-0075013580f6322a1"
  instance_type = var.instancia
  key_name = var.chave

  #user_data = "${file("init.sh")}" # Arquivo que coloquei os comandos para executar
  #user_data_replace_on_change = true
  #vpc_security_group_ids = ["sg-088a55698c58a1a84"] # Tag do security group 
  tags = {
    Name = "Terraform Ansible Python"
  }

  security_group_names = [ var.nome_grupo_seguranca ]
  user_data = filebase64("ansible.sh")

}


resource "aws_key_pair" "chaveSSH" { # Recurso para mandar as chaves SSH na AWS
  key_name = var.chave # nome da chave SSH
  public_key = file("${var.chave}.pub") # Passando o arquivo com a chave ssh

}

resource "aws_autoscaling_group" "grupo" {
  availability_zones = [ "${var.regiao_aws}a", "${var.regiao_aws}b" ]
  name = var.nomeGrupo
  max_size = var.maximo
  min_size = var.minimo
  launch_template {
    id = aws_launch_template.maquina.id
    version = "$Latest"
  }
  target_group_arns = [ aws_lb_target_group.alvoLoadBalancer.arn ]
}

resource "aws_default_subnet" "subnet_1" {
  availability_zone = "${var.regiao_aws}a" 
}

resource "aws_default_subnet" "subnet_2" {
  availability_zone = "${var.regiao_aws}b" 
}

resource "aws_lb" "loadBalancer" {
  internal = false
  subnets = [ aws_default_subnet.subnet_1.id, aws_default_subnet.subnet_2.id ]
}

resource "aws_default_vpc" "vpc" {
}

resource "aws_lb_target_group" "alvoLoadBalancer" {
  name = "alvoLoadBalancer"
  port = "8000"
  protocol = "HTTP"
  vpc_id = aws_default_vpc.vpc.id
}

resource "aws_lb_listener" "entradaLoadBalancer" {
  load_balancer_arn = aws_lb.loadBalancer.arn
  port = "8000"
  protocol = "HTTP"
  default_action {
    type = "forward"
    target_group_arn = aws_lb_target_group.alvoLoadBalancer.arn
  }
}
